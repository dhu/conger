The sample applications in this directory demonstrate the DPC fault-tolerance
protocol as describe in:

[balazinska06] 
Fault-Tolerance and Load Management in a Distributed Stream Processing System.
Magdalena Balazinska. PhD dissertation. 
Massachusetts Institute of Technology. February 2006.


================================================================
Compiling
================================================================

To compile the sample applications, follow these steps:

> cd borealis/test/
> ./setup
> wtf configure --with-antlr=/wherever/you/untarred/antlr/ [--with-nmstl=/where/you/installed/nmstl]
> make


================================================================
Faulttest
================================================================
The faulttest application demonstrates the behavior of a single
Borealis node running the DPC protocol and experiencing a temporary
failure on one of its input streams.

The faulttest application is composed of the following files:

- faulttest.xml: Query Diagram used by the application. 
  This query diagram contains examples of the different 
  operators (Aggregate, Filter, Map, SUnion, and SJoin)
  that support the DPC protocol. Note: the SJoin 
  operator needs more testing.

- faulttest.cc: Main application logic

- FaulttestMarshal.*: Support files automatically 
  generated by the marshal tool and modified to print tuple headers. 

To run the application, invoke the following script:

./runtest fault

You should see three windows:
1 - First,  the global catalog starts in a window called: HEAD"
2 - Second, a Borealis nodes starts in a window called: Borealis"
    You should see approximately the same output as that shown in 
    file: borealis.sample_output.log 
3 - Third, faulttest starts in a window called: faulttest"
    You should see approximately the same output as that shown
    in file: faulttest.sample_output.log 

Further details and explanations of the DPC protocol can be found in the
document mentioned above [balazinska06].

================================================================
Sunions
================================================================
The sunions application demonstrates the behavior of a single
Borealis node running the DPC protocol and experiencing
failures during failures and failures during recovery.

Note that DPC handles all kinds of failure scenarios but we
tested the implementation of multiple simultaneous failures only
for the single-node scenario.

To test failures during failures, execute
./runtest sunion 1

To test failures during recovery, execute
./runtest sunion 2

In each case, wait for the application window, "sunions" to
exit by itself before running:
./runtest stop

After running both applications, execute:
gnuplot tuples.gnuplot

You should now see two eps files: tuples1.eps and tuples2.eps
These figures should correspond to Figure 5.6 in [balazinska06].

The sunions application is composed of the following files:
- sunions.xml, which corresponds to the query diagram 
  shown in Figure 5.5 in [balazinska06].
- sunions.cc contains the main application logic
- SunionsMarshal.* contains the support files automatically generated by marshal


Examples of running the DPC protocol in a distributed setup
are located under test/composite/sunion-new/

